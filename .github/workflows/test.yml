name: Test Conjur Policy Action

on:
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: 'error'

  test-action:
    name: Test Action Execution
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test policy files
        run: |
          mkdir -p ./policies/test
          echo "- !policy
            id: test
            body:
              - !host test-host" > ./policies/test/test-policy.yml

      - name: Test action validation
        id: test-validation
        # This will fail because we're not providing required inputs, but
        # we just want to make sure the action can be loaded and run
        uses: ./
        continue-on-error: true
        with:
          conjur_url: 'https://example.com'
          conjur_account: 'default'
          conjur_authn_jwt_service_id: 'github'
          conjur_jwt_identity: 'host/github-actions/test'
          conjur_policy_branch: 'root'
          policy_paths: 'policies/**/*.yml'

      - name: Verify action loaded
        run: |
          if [[ "${{ steps.test-validation.outcome }}" == "failure" ]]; then
            echo "Action failed as expected due to missing real Conjur connection"
            echo "But we successfully validated it can be loaded and executed"
          else
            echo "Action unexpectedly succeeded - this shouldn't happen in our test environment!"
            exit 1
          fi

  build-docker:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t conjur-policy-action:test .
          echo "Successfully built Docker image"

  release-simulation:
    name: Simulate Release Process
    runs-on: ubuntu-latest
    needs: [test-action, build-docker]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/releases/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate release assets
        run: |
          # Check required files exist
          required_files=(
            "action.yml"
            "README.md"
            "LICENSE"
            "scripts/helpers.sh"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file '$file' not found"
              exit 1
            fi
          done
          
          echo "All required files present"
          
          # Validate action.yml
          if ! yq eval 'true' action.yml > /dev/null 2>&1; then
            echo "Error: action.yml is not valid YAML"
            exit 1
          fi
          
          echo "action.yml is valid YAML"
          echo "Release validation passed"